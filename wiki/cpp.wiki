#labels Tutorials,CPlusPlus
C++ syntax and basics. This site covers just native c++ stuff and some STL library, no Maya API!

=Some useful Data Types=
== Basic Data Tipes ===
signed: values both - and +  

unsigned: Just values +

You can use signed and unsigned with all the numeric data tipes:
{{{
signed int i;
unsigned double i;
unsigned int i;
}}}

Constants:
You can specify constants (their value won't be changed).
const float myConst= 0.1111;
*Just whole numbers*

Sorted according the precission.

char < short < int < long

*With floating point precision*

Sorted according the precission.

float < double < long double

*Other data types*

Boolean:

{{{
bool b=true;
bool c=false;
}}}

String:

(c++ has char natively or you can use String object from stl library.)

{{{
char label[] = "My text.";
// bevare label array looks like this: | M | y |  | t | e | x | t | . | NULL |  

// Or using String from std Library
#include <string>
using namespace std;
string  str("C++ is best language");
str+=" "+"Cool!"

}}}
==Composite data types==
===Structures===
For simple stuff you might prefer to use structers ranther than objects.
{{{
//declares structure someStruct o1,o3,o2
struct someStruct
{
int p1;
float fl;
double k;
}
o1,o2,o3;

// or you can define:
struct someStruct
{
int p1;
float fl;
double k;
};
// and declare later:
someStruct o1,o2;
someStruct o3;

}}}

===Enumerated groups===

Good for encoding some properties:
{{{
//This way we specify bitter=4,sweet=5,salty=6,hot=7
enum flavour{bitter=4,sweet,salty,hot};
//asigns peasoupFlavour= (int) 6
flavour peasoupFlavour=salty;

}}}
==Arrays==

Beware when you specifi the size, you use number of elements that the array will have. But when accessed the elements are indexed from 0.
{{{
int a[1]={1};
int b=a[0];
 }}} 

===Static===

Must specify the size and type:

*One-dimensional*
{{{
double v[30];
// With initialization
float v[3]={1,2.4,5};
}}}
*Multidimensional*
{{{
// Matrix
int a[4][4];
// Initalizes the first Matrix raw to 0 and second to 1
int table[2][4]={0,0,0,0,1,1,1,1};
int v[3][4] = { {0,1,2,3}, {10,11,12,13}, {20,21,22,23} };


}}}
===Dynamic===
Must specify type, size can be variable.

*One-dimensional*
{{{
float*  array= NULL;   // Pointer to float, initialize to nothing.
int lenght=100;           // Dynamic size for the array

array = new int[n];  // Allocate length*floats and save pointer in array. The arrays in c++ don't know their length!!! Must keep it in a separate variable
for (int i=0; i<length; i++) {
    array[i] = 0;    // Initialize all elements to zero.
}

delete [] array;  // When done, free memory pointed to by array.
array = NULL;     // Clear a to prevent using invalid memory reference.
}}}

*Multi-dimensional*

It's crazy to try to do it you would  work with pointer to pointer to pointers!!! Rather use one dimensional arrays with mapping or some external libraries.

=Operators=
==Arithmetic==
{{{
//adition
c=a+b;
//subtraction
c=a-b;
//multiplication
c=a*b;
// division beware 3/2.0 = 1.5, but 3.0/2 = 1.
c=a/b;
// modulus, reminder of a devided by b
c=a%b;

}}}
Arithmetic operators can be overloaded so you can use them even with objects (if you specifi their behavior).
(Greate reference here: [http://www.cs.caltech.edu/courses/cs11/material/cpp/donnie/cpp-ops.html])
{{{
  // Add this instance's value to other, and return a new instance
  // with the result.
  const MyClass MyClass::operator+(const MyClass &other) const {
    MyClass result = *this;     // Make a copy of myself.  Same as MyClass result(*this);
    result += other;            // Use += to add other to the copy.
    return result;              // All done!
  }
}}}

==Compound assignation==
{{{
a+=b; // a=a+b;
a-=b; // a=a-b;
a*=b; // a=a*b;
a*=b+c; //a=a*(b+c);
a/=b; //a=a/b;
a++; //a=a+1;
++a; // same as above, but value is changed before the command is executed
a--; //a=a-1;
--a; // same as above, but value is changed before the command is executed


// refernece to a++ and ++a
a=3;
b=a++;
//b=3 and a=4

a=3;
b=++a;
//b=4 and a=4

}}}

==Relational and logical operands==
*Relational op*

Is acctually a shorter form of if statement.
{{{
int a,b;
// if (a>b){max=a}else{max=b}
int max=(a>b)?a:b;
}}}

*Logical Operands*

{{{
//equals
a==b;
//not equals
a!=b;
//less then
a<b;
//more then
a>b;
//less then or equal
a<=b;
//more then or equal
a>=b;
// logical and
a&&b;
// logical or | is a "pipe" simbol
a||b;
// negation
!a;
}}}



=Reserved keywords=
The following words are reserved, and may not be used as variables...:
    auto
    _Bool
    break
    case
    char
    _Complex
    const
    continue
    default
    do	
    double
    else
    enum
    extern
    float
    for
    goto
    if
    _Imaginary
    inline
    int
    long
    register
    restrict
    return
    short
    signed
    sizeof
    static
    struct	
    switch
    typedef
    union
    unsigned
    void
    volatile
    while 

=Comments=
{{{
//single line comment
/* multi,
multi, masacre, cool
hiper, super

multiline comment
*/

}}}